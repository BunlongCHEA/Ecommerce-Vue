<template>
  <div class="product-page">
    <!-- Header Section -->
    <div class="header">
      <!-- Left: Hamburger Menu -->
      <button class="hamburger-menu" @click="toggleHamburger">â˜°</button>

      <!-- Right: Cart and User Profile -->
      <div class="header-buttons">
        <!-- Cart Button -->
        <button class="cart-button">
          <i class="cart-icon">ðŸ›’</i>
          <span v-if="totalQuantity > 0" class="cart-quantity">{{ totalQuantity }}</span>
        </button>

        <!-- User Profile Button -->
        <button class="profile-button">
          <img v-if="userImage" :src="userImage" alt="User Profile" class="user-image" />
          <i v-else class="default-user-icon">ðŸ‘¤</i>
        </button>
      </div>
    </div>

    <!-- Top: Swiper Section -->
    <div class="swiper-container">
      <Swiper
        :modules="[Autoplay, Pagination]"
        :autoplay="{ delay: 5000, disableOnInteraction: false }"
        :pagination="{ clickable: true }"
        loop="true"
        class="mySwiper"
      >
        <SwiperSlide v-for="(slide, index) in slides" :key="index">
          <div class="swiper-slide-content">
            <img :src="slide.imageUrl" :alt="slide.altText" />
          </div>
        </SwiperSlide>
      </Swiper>
    </div>

    <!-- Two-Column Layout -->
    <div class="main-content">
      <!-- Left Side: Filter Section -->
      <div class="filter-section">
        <!-- Search Box -->
        <div class="filter-box">
          <h3>Search</h3>
          <input
            type="text"
            v-model="searchQuery"
            placeholder="Search products..."
            @input="applyFilters"
          />
        </div>

        <!-- Category Filter -->
        <div class="filter-box">
          <h3>Category</h3>
          <div v-for="category in paginatedCategories" :key="category.id" class="filter-item">
            <input
              type="checkbox"
              :id="'category-' + category.id"
              :value="category.id"
              v-model="selectedCategories"
              @change="applyFilters"
            />
            <label :for="'category-' + category.id">{{ category.name }}</label>
          </div>
          <button v-if="categoriesPage < totalCategoriesPages" @click="loadMoreCategories">
            See More
          </button>
        </div>

        <!-- Brand (SubCategory) Filter -->
        <div class="filter-box">
          <h3>Brand</h3>
          <div
            v-for="subCategory in paginatedSubCategories"
            :key="subCategory.id"
            class="filter-item"
          >
            <input
              type="checkbox"
              :id="'subCategory-' + subCategory.id"
              :value="subCategory.id"
              v-model="selectedBrands"
              @change="applyFilters"
            />
            <label :for="'subCategory-' + subCategory.id">{{ subCategory.name }}</label>
          </div>
          <button v-if="subCategoriesPage < totalSubCategoriesPages" @click="loadMoreSubCategories">
            See More
          </button>
        </div>

        <!-- Price Range Filter -->
        <div class="filter-box">
          <h3>Price Range</h3>
          <div v-for="range in priceRanges" :key="range.label" class="filter-item">
            <input
              type="radio"
              name="priceRange"
              :id="range.label"
              :value="range"
              v-model="selectedPriceRange"
              @change="applyFilters"
            />
            <label :for="range.label">{{ range.label }}</label>
          </div>
        </div>
      </div>

      <!-- Right Side: Product List -->
      <div class="product-list">
        <div v-for="product in paginatedProducts" :key="product.id" class="product-item">
          <img :src="product.imageUrl" :alt="product.name" />
          <h4>{{ product.name }}</h4>
          <p class="store-name">Store: {{ product.storeName }}</p>
          <p class="price">
            ${{ product.price }}
            <span v-if="product.discountAmount" class="discount"
              >(-{{ product.discountAmount }}%)</span
            >
          </p>
          <p class="description">{{ product.description }}</p>
          <div class="quantity-control">
            <button @click="decreaseQuantity(product)">-</button>
            <input type="number" v-model="quantities[product.id]" min="0" />
            <button @click="increaseQuantity(product)">+</button>
          </div>
        </div>
      </div>

      <!-- Pagination Controls for Product List -->
      <!-- <div class="pagination-controls">
        <label for="itemsPerPage">Items per page:</label>
        <select id="itemsPerPage" v-model="itemsPerPage" @change="resetPagination">
          <option value="10">10</option>
          <option value="20">20</option>
          <option value="50">50</option>
        </select>
        <button :disabled="currentPage === 1" @click="prevPage">Previous</button>
        <button :disabled="currentPage === totalPages" @click="nextPage">Next</button>
      </div> -->

      <PaginationOption
        :totalItems="filteredProducts.length"
        :initialItemsPerPage="itemsPerPage"
        @update:currentPage="currentPage = $event"
        @update:itemsPerPage="itemsPerPage = $event"
      />
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import api from '@/services/api'
import { useRouter } from 'vue-router'

// Import Swiper modules and styles
import { Swiper, SwiperSlide } from 'swiper/vue'
import 'swiper/swiper-bundle.css'
import { Autoplay, Pagination } from 'swiper/modules'
import PaginationOption from '@/components/PaginationOption.vue'

// Data
// State for products, filters, and Swiper slides
const products = ref([])
const categories = ref([])
const subCategories = ref([])
const priceRanges = ref([
  { label: 'All', min: 0, max: Infinity },
  { label: '$1 - $10', min: 1, max: 10 },
  { label: '$11 - $50', min: 11, max: 50 },
  { label: '$51 - $100', min: 51, max: 100 },
  { label: '$101+', min: 101, max: Infinity },
])

// Swiper slides data
const slides = ref([
  {
    imageUrl:
      'https://images.vexels.com/content/194698/preview/shop-online-slider-template-4f2c60.png',
    altText: 'Slide 1',
  },
  {
    imageUrl: 'https://i.pinimg.com/736x/b6/89/96/b68996b0aeb13339740f961ada455a77.jpg',
    altText: 'Slide 2',
  },
  { imageUrl: 'https://pixosoft.com/images/sliders/pixosoft-slider-3.jpg', altText: 'Slide 3' },
])

// Header
const userImage = ref(null) // Placeholder for user image

// Filter State
const searchQuery = ref('')
const selectedCategories = ref([])
const selectedBrands = ref([])
const selectedPriceRange = ref(priceRanges.value[0]) // Default to "All"

// Quantity State
const quantities = ref({})

// Vue Router for redirection
const router = useRouter()

// Pagination state
const itemsPerPage = ref(10)
const currentPage = ref(1)
const categoriesPage = ref(1)
const subCategoriesPage = ref(1)
const itemsPerFilterPage = 10

// Method
// Fetch data from API
const fetchData = async () => {
  try {
    // Fetch Products
    const productResponse = await api.get('/product') // Token is included automatically
    products.value = productResponse.data.map((product) => ({
      id: product.id,
      name: product.name,
      price: product.price,
      description: product.description,
      imageUrl: product.imageUrl,
      storeName: product.storeName, // Store name from API
      discountAmount: product.discountAmount, // Discount amount from API
      subCategoryId: product.subCategoryId,
      categoryId: product.categoryId,
    }))

    // Fetch Categories
    const categoryResponse = await api.get('/category') // Token is included automatically
    categories.value = categoryResponse.data

    // Fetch SubCategories
    const subCategoryResponse = await api.get('/subcategory') // Token is included automatically
    subCategories.value = subCategoryResponse.data

    // Initialize quantities for each product
    products.value.forEach((product) => {
      quantities.value[product.id] = 0
    })
  } catch (error) {
    console.error('Error fetching data:', error)
    if (error.response?.status === 401) {
      console.error('Unauthorized. Redirecting to login...')
      router.push('/')
    }
  }
}
// Automatically fetch data when the page is loaded
onMounted(() => {
  fetchData()
})

// Computed Property for Filtered Products
const filteredProducts = computed(() => {
  return products.value.filter((product) => {
    const matchesSearchQuery = product.name.toLowerCase().includes(searchQuery.value.toLowerCase())

    const matchesCategory =
      selectedCategories.value.length === 0 || selectedCategories.value.includes(product.categoryId)

    const matchesSubCategory =
      selectedBrands.value.length === 0 || selectedBrands.value.includes(product.subCategoryId)

    const matchesPriceRange =
      !selectedPriceRange.value ||
      (product.price >= selectedPriceRange.value.min &&
        product.price <= selectedPriceRange.value.max)

    return matchesSearchQuery && matchesCategory && matchesSubCategory && matchesPriceRange
  })
})

// Computed Property for Total Quantity for Cart
const totalQuantity = computed(() => {
  return Object.values(quantities.value).reduce((total, quantity) => total + quantity, 0)
})

// Methods to Handle Quantity Changes
const increaseQuantity = (product) => {
  quantities.value[product.id]++
}
const decreaseQuantity = (product) => {
  if (quantities.value[product.id] > 0) {
    quantities.value[product.id]--
  }
}

// Apply Filters (Trigger Recalculation)
const applyFilters = () => {
  // This method exists to trigger recalculation when filters change.
}

// Hamburger Menu Toggle (Placeholder for future functionality)
const toggleHamburger = () => {
  // Placeholder for hamburger menu functionality
  console.log('Hamburger menu toggled')
}

// // Computed properties for paginated data
// const paginatedProducts = computed(() => {
//   const start = (currentPage.value - 1) * itemsPerPage.value
//   const end = start + itemsPerPage.value
//   return filteredProducts.value.slice(start, end)
// })

// const paginatedCategories = computed(() => {
//   // const start = (categoriesPage.value - 1) * itemsPerFilterPage
//   // const end = start + itemsPerFilterPage
//   return categories.value.slice(0, categoriesPage.value * itemsPerFilterPage)
// })

// const paginatedSubCategories = computed(() => {
//   // const start = (subCategoriesPage.value - 1) * itemsPerFilterPage
//   // const end = start + itemsPerFilterPage
//   return subCategories.value.slice(0, subCategoriesPage.value * itemsPerFilterPage)
// })

// // Total pages for categories, subcategories, and products
// const totalPages = computed(() => Math.ceil(filteredProducts.value.length / itemsPerPage.value))
// const totalCategoriesPages = computed(() => Math.ceil(categories.value.length / itemsPerFilterPage))
// const totalSubCategoriesPages = computed(() =>
//   Math.ceil(subCategories.value.length / itemsPerFilterPage),
// )

// // Methods for pagination controls
// const nextPage = () => {
//   if (currentPage.value < totalPages.value) currentPage.value++
// }
// const prevPage = () => {
//   if (currentPage.value > 1) currentPage.value--
// }
// const resetPagination = () => {
//   currentPage.value = 1
// }

// const loadMoreCategories = () => {
//   if (categoriesPage.value < totalCategoriesPages.value) categoriesPage.value++
// }

// const loadMoreSubCategories = () => {
//   if (subCategoriesPage.value < totalSubCategoriesPages.value) subCategoriesPage.value++
// }
</script>

<style scoped>
/* Main container for the page */
.product-page {
  display: flex;
  flex-wrap: nowrap;
  gap: 20px;
  padding: 10px;
  height: 100vh;
  box-sizing: border-box;
  overflow-x: auto; /* Enable horizontal scrolling when zoomed in */
  flex-direction: column; /* Add column direction to include swiper */
}

/* Header Section */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 20px;
  /* background-color: white; */
  background: transparent;
  /* border-bottom: 1px solid #ddd; */
}

.hamburger-menu {
  font-size: 38px;
  border: none;
  background: none;
  cursor: pointer;
  color: white;
}

.header-buttons {
  display: flex;
  align-items: center;
  gap: 20px;
}

.cart-button {
  position: relative;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 38px;
}

.cart-quantity {
  position: absolute;
  top: -5px;
  right: -10px;
  background: red;
  color: white;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 12px;
}

.profile-button {
  background: none;
  border: none;
  cursor: pointer;
}

.user-image {
  width: 32px;
  height: 32px;
  border-radius: 50%;
}

.default-user-icon {
  font-size: 38px;
}

/* Swiper Section */
.swiper-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  max-height: 350px;
  margin-bottom: 80px;
  margin-top: 50px;
}

.mySwiper {
  width: 100%;
  max-width: 1000px;
}

.mySwiper img {
  width: 100%;
  height: auto;
  border-radius: 8px;
  object-fit: contain;
}

/* Main Content: Filter + Product List */
.main-content {
  display: flex;
  flex-direction: row;
  gap: 20px;
  /* Align the filter and product list to the top */
  align-items: flex-start;
}

/* Left Side: Filter Section */
.filter-section {
  position: sticky;
  top: 10px; /* Adjust to control distance from top */
  flex: 0 0 300px;
  max-width: 300px;
  background: #f5f5f5;
  padding: 20px;
  border-radius: 8px;
  height: fit-content;
  box-sizing: border-box;
}

.filter-box {
  margin-bottom: 20px;
}

.filter-box h3 {
  margin-bottom: 10px;
  font-size: 16px;
}

.filter-item {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.filter-item label {
  margin-left: 8px;
  font-size: 14px;
}

/* Right Side: Product List */
.product-list {
  display: grid;
  grid-template-columns: repeat(5, 1fr); /* Fixed 5 columns */
  gap: 20px;
  flex-grow: 1;
  min-width: 1250px; /* Ensure enough width to maintain 5 columns */
  padding-bottom: 40px;
}

.product-item {
  background: #ffffff;
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 20px;
  text-align: center;
}

.product-item img {
  max-width: 100%;
  height: auto;
  margin-bottom: 15px;
}

.product-item h4 {
  font-size: 18px;
  margin-bottom: 10px;
}

.product-item .store-name {
  font-size: 14px;
  color: #666;
  margin-bottom: 5px;
}

.product-item .price {
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 10px;
}

.product-item .price .discount {
  color: red;
  font-size: 14px;
  margin-left: 5px;
}

.product-item .description {
  font-size: 14px;
  color: #666;
  margin-bottom: 15px;
}

.quantity-control {
  display: flex;
  align-items: center;
  gap: 10px;
  justify-content: center;
}

.quantity-control button {
  background: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  padding: 5px 10px;
  font-size: 16px;
  cursor: pointer;
}

.quantity-control button:hover {
  background: #0056b3;
}

.quantity-control input {
  width: 50px;
  text-align: center;
}
</style>
